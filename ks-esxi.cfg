#
# Sample scripted installation file
#
# Accept the VMware End User License Agreement
vmaccepteula
# Set the root password for the DCUI and Tech Support Mode
rootpw password
# Install on the first local disk available on machine
install --firstdisk=usb
# Set the network to DHCP on the first network adapter
network --bootproto=dhcp
# A sample post-install script
#reboot

%pre --interpreter=busybox
localcli network firewall set --enabled=false
esxcfg-vswitch vSwitch0 --link=`esxcfg-nics -l | awk '{if($4=="Up") {print $1;exit}}'`
localcli network ip interface ipv4 set -I 10.10.4.102 -t static -i vmk0 --netmask=255.255.0.0

cat >/tmp/daemon.py << EOF1
import sys, os, time, atexit, commands
from signal import SIGTERM 
class Daemon:
	def __init__(self, pidfile, stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):
        	self.stdin = stdin
	        self.stdout = stdout
        	self.stderr = stderr
	        self.pidfile = pidfile
    
	def daemonize(self):
        	try: 
            		pid = os.fork() 
            		if pid > 0:
                	# exit first parent
                		sys.exit(0) 
        	except OSError, e: 
            		sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
            		sys.exit(1)
        # decouple from parent environment
       		os.chdir("/") 
        	os.setsid() 
        	os.umask(0) 
        # do second fork
        	try: 
            		pid = os.fork() 
            		if pid > 0:
                		# exit from second parent
                		sys.exit(0) 
        	except OSError, e: 
           		sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
           		sys.exit(1) 
    
	        # redirect standard file descriptors
        	sys.stdout.flush()
        	sys.stderr.flush()
        	si = file(self.stdin, 'r')
        	so = file(self.stdout, 'a+')
        	se = file(self.stderr, 'a+', 0)
        	os.dup2(si.fileno(), sys.stdin.fileno())
        	os.dup2(so.fileno(), sys.stdout.fileno())
        	os.dup2(se.fileno(), sys.stderr.fileno())
    
        # write pidfile
        	atexit.register(self.delpid)
        	pid = str(os.getpid())
        	file(self.pidfile,'w+').write("%s\n" % pid)
    
	def delpid(self):
        	os.remove(self.pidfile)

	def start(self):
        # Check for a pidfile to see if the daemon already runs
        	try:
            		pf = file(self.pidfile,'r')
            		pid = int(pf.read().strip())
            		pf.close()
        	except IOError:
            		pid = None
    
        	if pid:
            		message = "pidfile %s already exist. Daemon already running?\n"
            		sys.stderr.write(message % self.pidfile)
            		sys.exit(1)
        
        # Start the daemon
        	self.daemonize()
        	self.run()

	def stop(self):
        # Get the pid from the pidfile
        	try:
            		pf = file(self.pidfile,'r')
            		pid = int(pf.read().strip())
            		pf.close()
        	except IOError:
            		pid = None
    
       		if not pid:
            		message = "pidfile %s does not exist. Daemon not running?\n"
            		sys.stderr.write(message % self.pidfile)
            		return # not an error in a restart

        # Try killing the daemon process    
       		try:
            		MY_OP=""
            		CTR  = 0
            		while CTR < 10:
                		CTR += 1
                		TEMP_CMD="kill -9 " + str(pid)
                		MY_OP = commands.getoutput(TEMP_CMD)
                		if (MY_OP.find("No such process")) > 0:
                    			if os.path.exists(self.pidfile):
                        			os.remove(self.pidfile)
                		time.sleep(2)
        	except OSError, err:
            		err = str(err)
            		if err.find("No such process") > 0:
                		if os.path.exists(self.pidfile):
                    			os.remove(self.pidfile)
            			else:
                			print str(err)
                			sys.exit(1)

	def restart(self):
        	self.stop()
        	self.start()

	def run(self):
        	message = "Initiating install progress monitor daemon"
EOF1
cat >/tmp/runDaemon.py << EOF2
import sys, time, string, commands, os
from xml.dom.minidom import parseString
from daemon import Daemon
import socket
print "begin runD"
class MyDaemon(Daemon):
	def run(self):
		s = socket.socket()         # Create a socket object
                port = 12398  
		s.connect(('10.10.3.2', port))
                s.send("Hello server!")
                f=open('/var/log/esxi_install.log','r')
        	while True:
                    	lines_file = f.read()
			s.send(str(lines_file))	
                	time.sleep(1)
                f.close()
		s.close()
            
if __name__ == "__main__":
	daemon = MyDaemon('/tmp/daemon-example.pid')
   	if len(sys.argv) == 2:
        	if 'start' == sys.argv[1]:
            		daemon.start()
        	elif 'stop' == sys.argv[1]:
            		daemon.stop()
        	elif 'restart' == sys.argv[1]:
            		daemon.restart()
       		else:
            		print "Unknown command"
        		sys.exit(0)
    	else:
        	print "usage: %s start|stop|restart" % sys.argv[0]
EOF2
python /tmp/runDaemon.py start


%post --interpreter=busybox
python /tmp/runDaemon.py stop
#reboot
